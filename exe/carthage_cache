#!/usr/bin/env ruby

#require "bundler/setup"
require "commander/import"
require "carthage_cache"

PROGRAM_NAME = 'carthage_cache'

program :name, PROGRAM_NAME
program :version, CarthageCache::VERSION
program :description, CarthageCache::DESCRIPTION

config = {}
verbose = false
global_option('-b', '--bucket-name BUCKET_NAME', 'Set Amazon S3 bucket to be used to store cache archives') do |bucket_name|
  config[:bucket_name] = bucket_name
end
global_option('--verbose') { verbose = true }

command :exist do |c|
  c.syntax = "#{PROGRAM_NAME} exist [PROJECT_PATH]"
  c.description = 'Checks if a cache archive exists for the current Cartfile.resolved.'
  c.option '-s', '--script', 'Makes prgram write "true" or "false" to STDOUT instead of more verbose message.'
  c.action do |args, options|
    app = CarthageCache::Application.new(args.first || ".", verbose, config)
    if app.archive_exist?
      if options.script
        puts "true"
      else
        puts "There is a cached archive for the current Cartfile.resolved file."
      end
    else
      if options.script
        puts "false"
      else
        puts "No cached archive available for the current Cartfile.resolved file."
        puts "You should probably run 'carthage bootstrap'."
      end
    end
  end
end

command :install do |c|
  c.syntax = "#{PROGRAM_NAME} install [PROJECT_PATH]"
  c.description = 'Installs the cache archive for the current Cartfile.resolved.'
  c.action do |args, options|
    app = CarthageCache::Application.new(args.first || ".", verbose, config)
    exit 1 unless app.install_archive
  end
end

command :publish do |c|
  c.syntax = "#{PROGRAM_NAME} publish [PROJECT_PATH]"
  c.description = 'Generates and uploads the cache archive for the current Cartfile.resolved.'
  c.option '-f', '--force', 'Forces to create a new archive even if an archive already exist.'
  c.option '-p', '--prune-build-directory', 'Removes unused frameworks from build directory.'
  c.option '-w', '--prune-white-list PRUNE_WHITE_LIST', String, 'Path to a YAML file containing the prune white list.'
  c.action do |args, options|
    options.default force: false, prune: false
    app = CarthageCache::Application.new(args.first || ".", verbose, config)
    app.create_archive(options.force, options.prune, options.prune_white_list)
  end
end

command :config do |c|
  c.syntax = "#{PROGRAM_NAME} config [PROJECT_PATH]"
  c.description = "Generates a '#{CarthageCache::Configurator::CONFIG_FILE_NAME}' config file."
  c.action do |args, options|
    terminal = CarthageCache::Terminal.new(verbose)
    configurator = CarthageCache::Configurator.new(terminal, args.first || ".")
    wizard = CarthageCache::ConfiguratorWizard.new(method(:ask), method(:password), args.first || ".")
    config = wizard.start
    configurator.save_config(config)
  end
end

command :prune do |c|
  c.syntax = "#{PROGRAM_NAME} prune [PROJECT_PATH]"
  c.description = 'Removes unused frameworks from build directory.'
  c.option '-w', '--prune-white-list PRUNE_WHITE_LIST', String, 'Path to a YAML file containing the prune white list.'
  c.action do |args, options|
    options.default force: false, prune: false
    app = CarthageCache::Application.new(args.first || ".", verbose, config)
    app.prune_build_directory(options.prune_white_list)
  end
end
